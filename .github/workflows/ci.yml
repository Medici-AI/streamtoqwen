name: CI

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  test:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements_mvp.txt'

      - name: Install deps and run pytest
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_mvp.txt
          pip install pytest
          pytest -q tests

  build_deploy:
    name: Build image and deploy to AKS
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    env:
      ACR_NAME: ${{ secrets.ACR_NAME }}
      RG_NAME: ${{ secrets.RG_NAME }}
      AKS_NAME: ${{ secrets.AKS_NAME }}
      KV_NAME: ${{ secrets.KV_NAME }}
      NAMESPACE: app-dev
      CHART_PATH: deploy/helm
      CHART_RELEASE: streamllm
      IMAGE_NAME: streamllm
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build, fetch secrets, and deploy with Helm
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail

            echo "Resolve ACR login server..."
            ACR_LOGIN=$(az acr show -n "$ACR_NAME" --query loginServer -o tsv)
            IMG_TAG=${GITHUB_SHA::7}
            IMG="$ACR_LOGIN/$IMAGE_NAME:$IMG_TAG"

            echo "ACR build: $IMG"
            az acr build -r "$ACR_NAME" -t "$IMG" .

            echo "Get AKS credentials..."
            az aks get-credentials -g "$RG_NAME" -n "$AKS_NAME" --overwrite-existing

            echo "Install kubectl if missing..."
            if ! command -v kubectl >/dev/null 2>&1; then
              az aks install-cli
            fi

            echo "Install Helm if missing..."
            if ! command -v helm >/dev/null 2>&1; then
              curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
            fi

            echo "Ensure namespace $NAMESPACE exists..."
            kubectl create namespace "$NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -

            echo "Reading secrets from Key Vault $KV_NAME via az..."
            OPENAI_VAR=$(az keyvault secret show --vault-name "$KV_NAME" -n OPENAI--API--KEY --query value -o tsv || echo "")
            PINECONE_VAR=$(az keyvault secret show --vault-name "$KV_NAME" -n PINECONE--API--KEY --query value -o tsv || echo "")
            SB_VAR=$(az keyvault secret show --vault-name "$KV_NAME" -n AZURE--SERVICE--BUS--CONNECTION --query value -o tsv || echo "")
            COSMOS_VAR=$(az keyvault secret show --vault-name "$KV_NAME" -n AZURE--COSMOS--CONNECTION --query value -o tsv || echo "")
            REDIS_VAR=$(az keyvault secret show --vault-name "$KV_NAME" -n REDIS--URL --query value -o tsv || echo "")

            echo "Sync k8s secret..."
            kubectl -n "$NAMESPACE" delete secret streamllm-secrets --ignore-not-found
            kubectl -n "$NAMESPACE" create secret generic streamllm-secrets \
              --from-literal=OPENAI--API--KEY="$OPENAI_VAR" \
              --from-literal=PINECONE--API--KEY="$PINECONE_VAR" \
              --from-literal=AZURE--SERVICE--BUS--CONNECTION="$SB_VAR" \
              --from-literal=AZURE--COSMOS--CONNECTION="$COSMOS_VAR" \
              --from-literal=REDIS--URL="$REDIS_VAR"

            echo "Helm upgrade..."
            helm upgrade --install "$CHART_RELEASE" "$CHART_PATH" \
              --namespace "$NAMESPACE" \
              --set image.repository="$ACR_LOGIN/$IMAGE_NAME" \
              --set image.tag="$IMG_TAG" \
              --atomic --wait --timeout 5m \
              -f "$CHART_PATH/values-dev.yaml"

